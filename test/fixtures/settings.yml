# This settings file can be used to create org-level settings

# This is the settings that need to be applied to all repositories in the org
# See https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#create-an-organization-repository for all available settings for a repository
repository:
  # A short description of the repository that will show up on GitHub
  description: description of the repo

  # A URL with more information about the repository
  homepage: https://example.github.io/

  # Create an initial commit with empty README.
  # Keep this set to true in most cases since many of the policies below cannot be implemented on bare repos
  auto_init: true

  # The default branch for this repository.
  default_branch: main

# Rulesets
# See https://docs.github.com/en/rest/orgs/rules?apiVersion=2022-11-28#create-an-organization-repository-rulesetfor available options
rulesets:
  - name: Template
    # The target of the ruleset. Can be one of:
    # - branch
    # - tag
    target: branch
    # The enforcement level of the ruleset. `evaluate` allows admins to test
    # rules before enforcing them.
    # - disabled
    # - active
    # - evaluate
    enforcement: active

    # The actors that can bypass the rules in this ruleset
    bypass_actors:
      - actor_id: number
        # type: The type of actor that can bypass a ruleset
        # - RepositoryRole
        # - Team
        # - Integration
        # - OrganizationAdmin
        actor_type: Team
        #  When the specified actor can bypass the ruleset. `pull_request`
        #  means that an actor can only bypass rules on pull requests.
        #  - always
        #  - pull_request
        bypass_mode: pull_request

      - actor_id: 1
        actor_type: OrganizationAdmin
        bypass_mode: always

      - actor_id: 7898
        actor_type: RepositoryRole
        bypass_mode: always

      - actor_id: 210920
        actor_type: Integration
        bypass_mode: always

    conditions:
      # Parameters for a repository ruleset ref name condition
      ref_name:
        # Array of ref names or patterns to include. One of these
        # patterns must match for the condition to pass. Also accepts
        # `~DEFAULT_BRANCH` to include the default branch or `~ALL` to
        # include all branches.
        include: ["~DEFAULT_BRANCH"]

        # Array of ref names or patterns to exclude. The condition
        # will not pass if any of these patterns match.
        exclude: ["refs/heads/oldmaster"]

      # This condition only exists at the org level (remove for suborg and repo level rulesets)
      repository_name:
        # Array of repository names or patterns to include.
        # One of these patterns must match for the condition
        # to pass. Also accepts `~ALL` to include all
        # repositories.
        include: ["test*"]
        # Array of repository names or patterns to exclude. The
        # condition will not pass if any of these patterns
        # match.
        exclude: ["test", "test1"]
        # Whether renaming of target repositories is
        # prevented.
        protected: true

    # Refer to https://docs.github.com/en/rest/orgs/rules#create-an-organization-repository-ruleset
    rules:
      - type: creation
      - type: update
        parameters:
          # Branch can pull changes from its upstream repository
          update_allows_fetch_and_merge: true
      - type: deletion
      - type: required_linear_history
      - type: required_signatures

      - type: required_deployments
        parameters:
          required_deployment_environments: ["staging"]

      - type: pull_request
        parameters:
          # Reviewable commits pushed will dismiss previous pull
          # request review approvals.
          dismiss_stale_reviews_on_push: true
          # Require an approving review in pull requests that modify
          # files that have a designated code owner
          require_code_owner_review: true
          # Whether the most recent reviewable push must be approved
          # by someone other than the person who pushed it.
          require_last_push_approval: true
          # The number of approving reviews that are required before a
          # pull request can be merged.
          required_approving_review_count: 1
          # All conversations on code must be resolved before a pull
          # request can be merged.
          required_review_thread_resolution: true

      # Choose which status checks must pass before branches can be merged
      # into a branch that matches this rule. When enabled, commits must
      # first be pushed to another branch, then merged or pushed directly
      # to a branch that matches this rule after status checks have
      # passed.
      - type: required_status_checks
        parameters:
          # Whether pull requests targeting a matching branch must be
          # tested with the latest code. This setting will not take
          # effect unless at least one status check is enabled.
          strict_required_status_checks_policy: true
          required_status_checks:
            - context: CodeQL
              integration_id: 1234
            - context: GHAS Compliance
              integration_id: 1234

      # Choose which workflows must pass before branches can be merged.
      - type: workflows
        parameters:
          workflows:
            - path: .github/workflows/example.yml
              # Run $("meta[name=octolytics-dimension-repository_id]").getAttribute('content')
              # in the browser console of the repository to get the repository_id
              repository_id: 123456
              # One of the following:
              # Branch or tag
              ref: refs/heads/main
              # Commit SHA
              sha: 1234567890abcdef

      - type: commit_message_pattern
        parameters:
          name: test commit_message_pattern
          # required:
          #  - operator
          #  - pattern
          negate: true
          operator: starts_with
          # The operator to use for matching.
          # - starts_with
          # - ends_with
          # - contains
          # - regex
          pattern: skip*
          # The pattern to match with.

      - type: commit_author_email_pattern
        parameters:
          name: test commit_author_email_pattern
          negate: false
          operator: regex
          pattern: "^.*@example.com$"

      - type: committer_email_pattern
        parameters:
          name: test committer_email_pattern
          negate: false
          operator: regex
          pattern: "^.*@example.com$"

      - type: branch_name_pattern
        parameters:
          name: test branch_name_pattern
          negate: false
          operator: regex
          pattern: ".*\/.*"

      - type: "tag_name_pattern"
        parameters:
          name: test tag_name_pattern
          negate: false
          operator: regex
          pattern: ".*\/.*"
